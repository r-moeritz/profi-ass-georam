Sections:
00: "org0001:c000" (C000-C203)


Source: "src/georam-out.asm"
                        	     1:         ;; GEOram output module for Profi-Ass v2
                        	     2:         ;; =====================================
                        	     3:         ;; A plugin for Profi-Ass v2 to emit object code to GEOram.
                        	     4:         ;; Also provides a routine to copy to C64 memory.
                        	     5:         ;; 
                        	     6:         ;; Format:
                        	     7:         ;; +-------------+---------------+-------------+
                        	     8:         ;; |    WORD     |     WORD      |             |
                        	     9:         ;; | data length | start address | object code |
                        	    10:         ;; +-------------+---------------+-------------+
                        	    11:         ;;
                        	    12:         ;; Usage:
                        	    13:         ;; ------
                        	    14:         ;; Set GEOram starting block & page:
                        	    15:         ;;   SYS(49152) 0,2 REM BLOCK 0, PAGE 2
                        	    16:         ;; 
                        	    17:         ;; Assemble to GEOram:
                        	    18:         ;;   .OPT P,O=$C030
                        	    19:         ;; 
                        	    20:         ;; Copy object code from GEOram to C64 memory:
                        	    21:         ;;   SYS49344
                        	    22: 
                        	    23:         ;; Constants
                        	    24: PA_START:       .equ $80        ;pa_len value indicating start of assembly
                        	    25: PA_STOP:        .equ $c0        ;pa_len value indicating end of assembly
                        	    26: MAX_PAGE:       .equ 64         ;last GEOram page +1
                        	    27: MAX_BLOCK:      .equ 32         ;last GEOram block +1
                        	    28: 
                        	    29:         ;; OS routines
                        	    30: newline:        .equ $aad7      ;print CRLF        
                        	    31: strout:         .equ $ab1e      ;print 0 terminated string in A (lo) and Y (hi)
                        	    32: frmnum:         .equ $ad8a      ;eval numeric expression
                        	    33: comma:          .equ $aefd      ;detect comma in BASIC line
                        	    34: facwrd:         .equ $b7f7      ;convert FAC #1 to word at linnum
                        	    35: illqua:         .equ $b248      ;routine to trigger illegal quantity error
                        	    36: linprt:         .equ $bdcd      ;print 16-bit integer in X (lo) and A (hi)
                        	    37: chrout:         .equ $ffd2      ;print a character in A
                        	    38:         
                        	    39:         ;; OS memory
                        	    40: linnum:         .ezp $14        ;variable to store BASIC line number
                        	    41:         
                        	    42:         ;; GEOram registers
                        	    43: georam:         .equ $de00      ;PAGE first address of page mapped to GEOram
                        	    44: geopage:        .equ $dffe      ;BYTE GEOram page selection register
                        	    45: geoblock:       .equ $dfff      ;BYTE 16K GEOram block selection register
                        	    46: 
                        	    47:         ;; Profi-Ass variables to read
                        	    48: pa_op:          .ezp $4b        ;BYTEx3 buffer containing first 3 bytes
                        	    49: pa_len:         .ezp $4e        ;BYTE number of bytes to emit -1
                        	    50: pa_adr:         .ezp $56        ;WORD object code starting address
                        	    51: pa_buf:         .equ $015b      ;buffer for remaining bytes beyond first 3
                        	    52: 
                        	    53:         ;; Working memory
                        	    54: datalen:        .ezp $a3        ;WORD total bytes written or left to copy
                        	    55: curpage:        .ezp $a5        ;BYTE current GEOram page (0-63)        
                        	    56: curblock:       .ezp $a6        ;BYTE current GEOram block (0-31)
                        	    57: offset:         .ezp $a7        ;BYTE offset within page ($00-$ff)
                        	    58: c64addr:        .ezp $a7        ;WORD address to copy to in C64 main memory
                        	    59: firstpage:      .ezp $a8        ;BYTE first GEORAM page to write to / copy from
                        	    60: firstblock:     .ezp $a9        ;BYTE first GEOram block to write to / copy from
                        	    61: 
                        	    62:         ;; Set first block and page from user input.
                        	    63:         ;; Call from BASIC via SYS.
                        	    64:         ;; ------------------------------------------
                        	    65:         .org $c000
                        	    66: setfirst:
00:C000 20A9C1          	    67:         jsr getwrd
00:C003 A515            	    68:         lda linnum+1
00:C005 D01B            	    69:         bne iqerr
00:C007 A514            	    70:         lda linnum
00:C009 C920            	    71:         cmp #MAX_BLOCK
00:C00B B015            	    72:         bcs iqerr
00:C00D 85A9            	    73:         sta firstblock
00:C00F 20FDAE          	    74:         jsr comma
00:C012 20A9C1          	    75:         jsr getwrd
00:C015 A515            	    76:         lda linnum+1
00:C017 D009            	    77:         bne iqerr
00:C019 A514            	    78:         lda linnum
00:C01B C940            	    79:         cmp #MAX_PAGE
00:C01D B003            	    80:         bcs iqerr
00:C01F 85A8            	    81:         sta firstpage
00:C021 60              	    82:         rts
00:C022 4C48B2          	    83: iqerr:  jmp illqua
                        	    84:         
                        	    85:         ;; Write object code to GEOram.
                        	    86:         ;; Called by Profi-Ass.
                        	    87:         ;; ----------------------------
                        	    88:         .align 4
00:C030 A54E            	    89: write:  lda pa_len
00:C032 C9C0            	    90:         cmp #PA_STOP
00:C034 F060            	    91:         beq finwrt
00:C036 C980            	    92:         cmp #PA_START
00:C038 F048            	    93:         beq start
00:C03A A000            	    94:         ldy #0
00:C03C A6A7            	    95:         ldx offset
00:C03E B94B00          	    96: out:    lda pa_op,y
00:C041 9D00DE          	    97: out1:   sta georam,x
00:C044 2027C1          	    98:         jsr inc_datalen         ;increment total bytes written
00:C047 E8              	    99:         inx
00:C048 7011            	   100:         bvs nextpage            ;overflow? next page!
00:C04A 86A7            	   101:         stx offset
00:C04C C44E            	   102: chklen: cpy pa_len
00:C04E F045            	   103:         beq return
00:C050 C8              	   104:         iny
00:C051 C003            	   105:         cpy #3
00:C053 90E9            	   106:         bcc out
00:C055 B95801          	   107:         lda pa_buf-3,y
00:C058 4C41C0          	   108:         jmp out1
                        	   109: nextpage:
00:C05B A200            	   110:         ldx #0
00:C05D 86A7            	   111:         stx offset
00:C05F E6A5            	   112:         inc curpage
00:C061 A5A5            	   113:         lda curpage
00:C063 C940            	   114:         cmp #MAX_PAGE
00:C065 F006            	   115:         beq nextblock           ;past page 63? next block!
00:C067 8DFEDF          	   116:         sta geopage
00:C06A 4C4CC0          	   117:         jmp chklen
                        	   118: nextblock:
00:C06D A900            	   119:         lda #0
00:C06F 85A5            	   120:         sta curpage
00:C071 8DFEDF          	   121:         sta geopage
00:C074 E6A6            	   122:         inc curblock
00:C076 A5A6            	   123:         lda curblock
00:C078 C920            	   124:         cmp #MAX_BLOCK          ;past page 31? out of memory!
00:C07A F036            	   125:         beq enomem
00:C07C 8DFFDF          	   126:         sta geoblock
00:C07F 4C4CC0          	   127:         jmp chklen
00:C082 200EC1          	   128: start:  jsr init
00:C085 A6A7            	   129:         ldx offset
00:C087 A556            	   130:         lda pa_adr
00:C089 9D00DE          	   131:         sta georam,x
00:C08C E8              	   132:         inx
00:C08D A557            	   133:         lda pa_adr+1
00:C08F 9D00DE          	   134:         sta georam,x
00:C092 E8              	   135:         inx
00:C093 86A7            	   136:         stx offset
00:C095 60              	   137: return: rts        
                        	   138:         ;; Write data length to first block & page of GEOram
00:C096 A5A9            	   139: finwrt: lda firstblock
00:C098 8DFFDF          	   140:         sta geoblock
00:C09B 85A6            	   141:         sta curblock
00:C09D A5A8            	   142:         lda firstpage
00:C09F 8DFEDF          	   143:         sta geopage
00:C0A2 85A5            	   144:         sta curpage
00:C0A4 A5A3            	   145:         lda datalen
00:C0A6 8D00DE          	   146:         sta georam
00:C0A9 A5A4            	   147:         lda datalen+1
00:C0AB 8D01DE          	   148:         sta georam+1
00:C0AE 2035C1          	   149:         jsr print_write_summary
00:C0B1 60              	   150:         rts
00:C0B2 20D7AA          	   151: enomem: jsr newline
00:C0B5 A9E7            	   152:         lda #<outofmem
00:C0B7 A0C1            	   153:         ldy #>outofmem
00:C0B9 201EAB          	   154:         jsr strout
00:C0BC 60              	   155:         rts
                        	   156: 
                        	   157:         ;; Copy object code from GEOram to C64.
                        	   158:         ;; Call from BASIC via SYS.
                        	   159:         ;; ------------------------------------
                        	   160:         .align 4
00:C0C0 200EC1          	   161: read:   jsr init
00:C0C3 208FC1          	   162:         jsr read_header
00:C0C6 E8              	   163:         inx
                        	   164:         ;; Copy loop
00:C0C7 A000            	   165:         ldy #0
00:C0C9 BD00DE          	   166: rloop:  lda georam,x
00:C0CC 91A7            	   167:         sta (c64addr),y
00:C0CE 2073C1          	   168:         jsr dec_datalen
00:C0D1 A5A3            	   169:         lda datalen
00:C0D3 F032            	   170:         beq fincpy
00:C0D5 C8              	   171:         iny
00:C0D6 7006            	   172:         bvs incadr
00:C0D8 E8              	   173: chkpg:  inx
00:C0D9 7009            	   174:         bvs nxpag
00:C0DB 4CC9C0          	   175:         jmp rloop
00:C0DE 2081C1          	   176: incadr: jsr inc_c64addr
00:C0E1 4CD8C0          	   177:         jmp chkpg
00:C0E4 E6A5            	   178: nxpag:  inc curpage
00:C0E6 A5A5            	   179:         lda curpage
00:C0E8 C940            	   180:         cmp #MAX_PAGE
00:C0EA F006            	   181:         beq nxblk               ;past page 63? next block!
00:C0EC 8DFEDF          	   182:         sta geopage
00:C0EF 4CC9C0          	   183:         jmp rloop
00:C0F2 A900            	   184: nxblk:  lda #0
00:C0F4 85A5            	   185:         sta curpage
00:C0F6 8DFEDF          	   186:         sta geopage
00:C0F9 E6A6            	   187:         inc curblock
00:C0FB A5A6            	   188:         lda curblock
00:C0FD C920            	   189:         cmp #MAX_BLOCK          ;past block 31? out of memory!
00:C0FF F0B1            	   190:         beq enomem
00:C101 8DFFDF          	   191:         sta geoblock
00:C104 4CC9C0          	   192:         jmp rloop
00:C107 208FC1          	   193: fincpy: jsr read_header
00:C10A 205AC1          	   194:         jsr print_copy_summary
00:C10D 60              	   195:         rts
                        	   196:         
                        	   197:         ;; Routine to initialize GEOram registers & working memory
00:C10E A5A9            	   198: init:   lda firstblock
00:C110 8DFFDF          	   199:         sta geoblock
00:C113 85A6            	   200:         sta curblock
00:C115 A5A8            	   201:         lda firstpage
00:C117 8DFEDF          	   202:         sta geopage
00:C11A 85A5            	   203:         sta curpage
00:C11C A900            	   204:         lda #0
00:C11E 85A3            	   205:         sta datalen
00:C120 85A4            	   206:         sta datalen+1        
00:C122 A902            	   207:         lda #2                  ;set offset to 2 to leave space for data length
00:C124 85A7            	   208:         sta offset
00:C126 60              	   209:         rts
                        	   210:         
                        	   211:         ;; Routine to increment data length
                        	   212: inc_datalen:
00:C127 18              	   213:         clc
00:C128 A5A3            	   214:         lda datalen
00:C12A 6901            	   215:         adc #1
00:C12C 85A3            	   216:         sta datalen
00:C12E A5A4            	   217:         lda datalen+1
00:C130 6900            	   218:         adc #0
00:C132 85A4            	   219:         sta datalen+1
00:C134 60              	   220:         rts
                        	   221: 
                        	   222:         ;; Routine to print summary of data written
                        	   223: print_write_summary:
00:C135 20D7AA          	   224:         jsr newline
00:C138 A6A3            	   225:         ldx datalen
00:C13A A5A4            	   226:         lda datalen+1
00:C13C 20CDBD          	   227:         jsr linprt
00:C13F A9AF            	   228:         lda #<write_summary
00:C141 A0C1            	   229:         ldy #>write_summary
00:C143 201EAB          	   230:         jsr strout
00:C146 A6A6            	   231:         ldx curblock
00:C148 A900            	   232:         lda #0
00:C14A 20CDBD          	   233:         jsr linprt
00:C14D A92C            	   234:         lda #','
00:C14F 20D2FF          	   235:         jsr chrout
00:C152 A6A5            	   236:         ldx curpage
00:C154 A900            	   237:         lda #0
00:C156 20CDBD          	   238:         jsr linprt
00:C159 60              	   239:         rts
                        	   240: 
                        	   241:         ;; Routine to print summary of data copied
                        	   242: print_copy_summary:
00:C15A 20D7AA          	   243:         jsr newline
00:C15D A6A3            	   244:         ldx datalen
00:C15F A5A4            	   245:         lda datalen+1
00:C161 20CDBD          	   246:         jsr linprt
00:C164 A9C9            	   247:         lda #<copy_summary
00:C166 A0C1            	   248:         ldy #>copy_summary
00:C168 201EAB          	   249:         jsr strout
00:C16B A6A7            	   250:         ldx c64addr
00:C16D A5A8            	   251:         lda c64addr+1
00:C16F 20CDBD          	   252:         jsr linprt
00:C172 60              	   253:         rts
                        	   254: 
                        	   255:         ;; Routine to decrement data length
                        	   256: dec_datalen:
00:C173 38              	   257:         sec
00:C174 A5A3            	   258:         lda datalen
00:C176 E901            	   259:         sbc #1
00:C178 85A3            	   260:         sta datalen
00:C17A A5A4            	   261:         lda datalen+1
00:C17C E900            	   262:         sbc #0
00:C17E 85A4            	   263:         sta datalen+1
00:C180 60              	   264:         rts
                        	   265: 
                        	   266:         ;; Routine to increment C64 address
                        	   267: inc_c64addr:
00:C181 18              	   268:         clc
00:C182 A5A7            	   269:         lda c64addr
00:C184 6901            	   270:         adc #1
00:C186 85A7            	   271:         sta c64addr
00:C188 A5A8            	   272:         lda c64addr+1
00:C18A 6900            	   273:         adc #0
00:C18C 85A8            	   274:         sta c64addr+1
00:C18E 60              	   275:         rts
                        	   276: 
                        	   277:         ;; Routine to read data length & C64 address from GEOram
                        	   278: read_header:
00:C18F A200            	   279:         ldx #0
                        	   280:         ;; Read data length
00:C191 BD00DE          	   281:         lda georam,x
00:C194 85A3            	   282:         sta datalen
00:C196 E8              	   283:         inx
00:C197 BD00DE          	   284:         lda georam,x
00:C19A 85A4            	   285:         sta datalen+1
00:C19C E8              	   286:         inx
                        	   287:         ;; Read C64 address
00:C19D BD00DE          	   288:         lda georam,x
00:C1A0 85A7            	   289:         sta c64addr
00:C1A2 E8              	   290:         inx
00:C1A3 BD00DE          	   291:         lda georam,x
00:C1A6 85A8            	   292:         sta c64addr+1
00:C1A8 60              	   293:         rts
                        	   294: 
                        	   295:         ;; Read word from BASIC
00:C1A9 208AAD          	   296: getwrd: jsr frmnum
00:C1AC 4CF7B7          	   297:         jmp facwrd
                        	   298:         
                        	   299: write_summary:
00:C1AF 2042595445532057	   300:         .string " BYTES WRITTEN TO GEORAM "
00:C1B7 52495454454E2054
00:C1BF 4F2047454F52414D
00:C1C7 20
00:C1C8 00
                        	   301: 
                        	   302: copy_summary:
00:C1C9 2042595445532043	   303:         .string " BYTES COPIED FROM GEORAM TO "
00:C1D1 4F50494544204652
00:C1D9 4F4D2047454F5241
00:C1E1 4D20544F20
00:C1E6 00
                        	   304: 
                        	   305: outofmem:
00:C1E7 4552524F523A2047	   306:         .string "ERROR: GEORAM OUT OF MEMORY"
00:C1EF 454F52414D204F55
00:C1F7 54204F46204D454D
00:C1FF 4F5259
00:C202 00
                        	   307: 


Symbols by name:
c64addr                          E:00A7
chklen                           A:C04C
chkpg                            A:C0D8
chrout                           E:FFD2
comma                            E:AEFD
copy_summary                     A:C1C9
curblock                         E:00A6
curpage                          E:00A5
datalen                          E:00A3
dec_datalen                      A:C173
enomem                           A:C0B2
facwrd                           E:B7F7
fincpy                           A:C107
finwrt                           A:C096
firstblock                       E:00A9
firstpage                        E:00A8
frmnum                           E:AD8A
geoblock                         E:DFFF
geopage                          E:DFFE
georam                           E:DE00
getwrd                           A:C1A9
illqua                           E:B248
inc_c64addr                      A:C181
inc_datalen                      A:C127
incadr                           A:C0DE
init                             A:C10E
iqerr                            A:C022
linnum                           E:0014
linprt                           E:BDCD
MAX_BLOCK                        E:0020
MAX_PAGE                         E:0040
newline                          E:AAD7
nextblock                        A:C06D
nextpage                         A:C05B
nxblk                            A:C0F2
nxpag                            A:C0E4
offset                           E:00A7
out                              A:C03E
out1                             A:C041
outofmem                         A:C1E7
pa_adr                           E:0056
pa_buf                           E:015B
pa_len                           E:004E
pa_op                            E:004B
PA_START                         E:0080
PA_STOP                          E:00C0
print_copy_summary               A:C15A
print_write_summary              A:C135
read                             A:C0C0
read_header                      A:C18F
return                           A:C095
rloop                            A:C0C9
setfirst                         A:C000
start                            A:C082
strout                           E:AB1E
write                            A:C030
write_summary                    A:C1AF

Symbols by value:
0014 linnum
0020 MAX_BLOCK
0040 MAX_PAGE
004B pa_op
004E pa_len
0056 pa_adr
0080 PA_START
00A3 datalen
00A5 curpage
00A6 curblock
00A7 c64addr
00A7 offset
00A8 firstpage
00A9 firstblock
00C0 PA_STOP
015B pa_buf
AAD7 newline
AB1E strout
AD8A frmnum
AEFD comma
B248 illqua
B7F7 facwrd
BDCD linprt
C000 setfirst
C022 iqerr
C030 write
C03E out
C041 out1
C04C chklen
C05B nextpage
C06D nextblock
C082 start
C095 return
C096 finwrt
C0B2 enomem
C0C0 read
C0C9 rloop
C0D8 chkpg
C0DE incadr
C0E4 nxpag
C0F2 nxblk
C107 fincpy
C10E init
C127 inc_datalen
C135 print_write_summary
C15A print_copy_summary
C173 dec_datalen
C181 inc_c64addr
C18F read_header
C1A9 getwrd
C1AF write_summary
C1C9 copy_summary
C1E7 outofmem
DE00 georam
DFFE geopage
DFFF geoblock
FFD2 chrout
