Sections:
00: "org0001:c000" (C000-C1EB)


Source: "src/georam-out.asm"
                        	     1:         ;; GEOram output module for Profi-Ass v2
                        	     2:         ;; =====================================
                        	     3:         ;; A plugin for Profi-Ass v2 to emit object code to GEOram.
                        	     4:         ;; Also provides a routine to copy to C64 memory.
                        	     5:         ;; 
                        	     6:         ;; Format:
                        	     7:         ;; +-------------+---------------+-------------+
                        	     8:         ;; |    WORD     |     WORD      |             |
                        	     9:         ;; | data length | start address | object code |
                        	    10:         ;; +-------------+---------------+-------------+
                        	    11:         ;;
                        	    12:         ;; Usage:
                        	    13:         ;; ------
                        	    14:         ;; Set GEOram starting block:
                        	    15:         ;;   SYS(49152) 0
                        	    16:         ;; 
                        	    17:         ;; Assemble to GEOram:
                        	    18:         ;;   .OPT P,O=$C020
                        	    19:         ;; 
                        	    20:         ;; Copy object code from GEOram to C64 memory:
                        	    21:         ;;   SYS49328
                        	    22: 
                        	    23:         ;; Constants
                        	    24: PA_START:       .equ $80        ;pa_len value indicating start of assembly
                        	    25: PA_STOP:        .equ $c0        ;pa_len value indicating end of assembly
                        	    26: MAX_PAGE:       .equ 64         ;last GEOram page +1
                        	    27: MAX_BLOCK:      .equ 32         ;last GEOram block +1
                        	    28: 
                        	    29:         ;; OS routines
                        	    30: newline:        .equ $aad7      ;print CRLF        
                        	    31: strout:         .equ $ab1e      ;print 0 terminated string in A (lo) and Y (hi)
                        	    32: frmnum:         .equ $ad8a      ;eval numeric expression
                        	    33: facwrd:         .equ $b7f7      ;convert FAC #1 to word at linnum
                        	    34: illqua:         .equ $b248      ;routine to trigger illegal quantity error
                        	    35: linprt:         .equ $bdcd      ;print 16-bit integer in X (lo) and A (hi)
                        	    36:         
                        	    37:         ;; OS memory
                        	    38: linnum:         .ezp $14        ;variable to store BASIC line number
                        	    39:         
                        	    40:         ;; GEOram registers
                        	    41: georam:         .equ $de00      ;first address mapped to GEOram
                        	    42: geoblock:       .equ $dfff      ;16K GEOram block selection register
                        	    43: geopage:        .equ $dffe      ;GEOram page selection register
                        	    44: 
                        	    45:         ;; Profi-Ass variables to read
                        	    46: pa_op:          .ezp $4b        ;BYTEx3 buffer containing first 3 bytes
                        	    47: pa_len:         .ezp $4e        ;BYTE number of bytes to emit -1
                        	    48: pa_adr:         .ezp $56        ;WORD object code starting address
                        	    49: pa_buf:         .equ $015b      ;buffer for remaining bytes beyond first 3
                        	    50: 
                        	    51:         ;; Working memory
                        	    52: datalen:        .ezp $a3        ;WORD total bytes written or left to copy
                        	    53: curblock:       .ezp $a5        ;BYTE current GEOram block (0-31)
                        	    54: curpage:        .ezp $a6        ;BYTE current GEOram page (0-63)
                        	    55: offset:         .ezp $a7        ;BYTE offset within page ($00-$ff)
                        	    56: c64addr:        .ezp $a7        ;WORD address to copy to in C64 main memory
                        	    57: first_block:    .ezp $a8        ;BYTE first GEOram block to write to / copy from
                        	    58: 
                        	    59:         ;; Set number of first block from user input.
                        	    60:         ;; Call from BASIC via SYS.
                        	    61:         ;; ------------------------------------------
                        	    62:         .org $c000
                        	    63: set_block:
00:C000 208BC1          	    64:         jsr getwrd
00:C003 A515            	    65:         lda linnum+1
00:C005 D009            	    66:         bne iqerr
00:C007 A514            	    67:         lda linnum
00:C009 C920            	    68:         cmp #MAX_BLOCK
00:C00B B003            	    69:         bcs iqerr        
00:C00D 85A8            	    70:         sta first_block
00:C00F 60              	    71:         rts
00:C010 4C48B2          	    72: iqerr:  jmp illqua
                        	    73:         
                        	    74:         ;; Write object code to GEOram.
                        	    75:         ;; Called by Profi-Ass.
                        	    76:         ;; ----------------------------
                        	    77:         .align 4
00:C020 A54E            	    78: write:  lda pa_len
00:C022 C9C0            	    79:         cmp #PA_STOP
00:C024 F060            	    80:         beq finwrt
00:C026 C980            	    81:         cmp #PA_START
00:C028 F048            	    82:         beq start
00:C02A A000            	    83:         ldy #0
00:C02C A6A7            	    84:         ldx offset
00:C02E B94B00          	    85: out:    lda pa_op,y
00:C031 9D00DE          	    86: out1:   sta georam,x
00:C034 2015C1          	    87:         jsr inc_datalen          ;increment total bytes written
00:C037 E8              	    88:         inx
00:C038 7011            	    89:         bvs nextpage            ;overflow? next page!
00:C03A 86A7            	    90:         stx offset
00:C03C C44E            	    91: chklen: cpy pa_len
00:C03E F045            	    92:         beq return
00:C040 C8              	    93:         iny
00:C041 C003            	    94:         cpy #3
00:C043 90E9            	    95:         bcc out
00:C045 B95801          	    96:         lda pa_buf-3,y
00:C048 4C31C0          	    97:         jmp out1
                        	    98: nextpage:
00:C04B A200            	    99:         ldx #0
00:C04D 86A7            	   100:         stx offset
00:C04F E6A6            	   101:         inc curpage
00:C051 A5A6            	   102:         lda curpage
00:C053 C940            	   103:         cmp #MAX_PAGE
00:C055 F006            	   104:         beq nextblock           ;past page 63? next block!
00:C057 8DFEDF          	   105:         sta geopage
00:C05A 4C3CC0          	   106:         jmp chklen
                        	   107: nextblock:
00:C05D A900            	   108:         lda #0
00:C05F 85A6            	   109:         sta curpage
00:C061 8DFEDF          	   110:         sta geopage
00:C064 E6A5            	   111:         inc curblock
00:C066 A5A5            	   112:         lda curblock
00:C068 C920            	   113:         cmp #MAX_BLOCK
00:C06A F039            	   114:         beq enomem
00:C06C 8DFFDF          	   115:         sta geoblock
00:C06F 4C3CC0          	   116:         jmp chklen
00:C072 20FEC0          	   117: start:  jsr init
00:C075 A6A7            	   118:         ldx offset
00:C077 A556            	   119:         lda pa_adr
00:C079 9D00DE          	   120:         sta georam,x
00:C07C E8              	   121:         inx
00:C07D A557            	   122:         lda pa_adr+1
00:C07F 9D00DE          	   123:         sta georam,x
00:C082 E8              	   124:         inx
00:C083 86A7            	   125:         stx offset
00:C085 60              	   126: return: rts        
                        	   127:         ;; Write data length to first word in first block of GEOram
00:C086 A5A8            	   128: finwrt: lda first_block
00:C088 8DFFDF          	   129:         sta geoblock
00:C08B 85A5            	   130:         sta curblock
00:C08D A900            	   131:         lda #0
00:C08F 8DFEDF          	   132:         sta geopage
00:C092 85A6            	   133:         sta curpage
00:C094 A200            	   134:         ldx #0
00:C096 B5A3            	   135:         lda datalen,x
00:C098 9D00DE          	   136:         sta georam,x
00:C09B E8              	   137:         inx
00:C09C B5A3            	   138:         lda datalen,x
00:C09E 9D00DE          	   139:         sta georam,x
00:C0A1 2023C1          	   140:         jsr print_write_summary
00:C0A4 60              	   141:         rts
00:C0A5 20D7AA          	   142: enomem: jsr newline
00:C0A8 A9CF            	   143:         lda #<outofmem
00:C0AA A0C1            	   144:         ldy #>outofmem
00:C0AC 201EAB          	   145:         jsr strout
00:C0AF 60              	   146:         rts
                        	   147: 
                        	   148:         ;; Copy object code from GEOram to C64.
                        	   149:         ;; Call from BASIC via SYS.
                        	   150:         ;; ------------------------------------
                        	   151:         .align 4
00:C0B0 20FEC0          	   152: read:   jsr init
00:C0B3 2071C1          	   153:         jsr read_header
00:C0B6 E8              	   154:         inx
                        	   155:         ;; Copy loop
00:C0B7 A000            	   156:         ldy #0
00:C0B9 BD00DE          	   157: rloop:  lda georam,x
00:C0BC 91A7            	   158:         sta (c64addr),y
00:C0BE 2055C1          	   159:         jsr dec_datalen
00:C0C1 A5A3            	   160:         lda datalen
00:C0C3 F032            	   161:         beq fincpy
00:C0C5 C8              	   162:         iny
00:C0C6 7006            	   163:         bvs incadr
00:C0C8 E8              	   164: chkpg:  inx
00:C0C9 7009            	   165:         bvs nxpag
00:C0CB 4CB9C0          	   166:         jmp rloop
00:C0CE 2063C1          	   167: incadr: jsr inc_c64addr
00:C0D1 4CC8C0          	   168:         jmp chkpg
00:C0D4 E6A6            	   169: nxpag:  inc curpage
00:C0D6 A5A6            	   170:         lda curpage
00:C0D8 C940            	   171:         cmp #MAX_PAGE
00:C0DA F006            	   172:         beq nxblk               ;past page 63? next block!
00:C0DC 8DFEDF          	   173:         sta geopage
00:C0DF 4CB9C0          	   174:         jmp rloop
00:C0E2 A900            	   175: nxblk:  lda #0
00:C0E4 85A6            	   176:         sta curpage
00:C0E6 8DFEDF          	   177:         sta geopage
00:C0E9 E6A5            	   178:         inc curblock
00:C0EB A5A5            	   179:         lda curblock
00:C0ED C920            	   180:         cmp #MAX_BLOCK
00:C0EF F0B4            	   181:         beq enomem
00:C0F1 8DFFDF          	   182:         sta geoblock
00:C0F4 4CB9C0          	   183:         jmp rloop
00:C0F7 2071C1          	   184: fincpy: jsr read_header
00:C0FA 203CC1          	   185:         jsr print_copy_summary
00:C0FD 60              	   186:         rts
                        	   187:         
                        	   188:         ;; Routine to initialize GEOram registers & working memory
00:C0FE A5A8            	   189: init:   lda first_block
00:C100 8DFFDF          	   190:         sta geoblock
00:C103 85A5            	   191:         sta curblock
00:C105 A900            	   192:         lda #0
00:C107 8DFEDF          	   193:         sta geopage
00:C10A 85A6            	   194:         sta curpage
00:C10C 85A3            	   195:         sta datalen
00:C10E 85A4            	   196:         sta datalen+1        
00:C110 A902            	   197:         lda #2                  ;set offset to 2 to leave space for data length
00:C112 85A7            	   198:         sta offset
00:C114 60              	   199:         rts
                        	   200:         
                        	   201:         ;; Routine to increment data length
                        	   202: inc_datalen:
00:C115 18              	   203:         clc
00:C116 A5A3            	   204:         lda datalen
00:C118 6901            	   205:         adc #1
00:C11A 85A3            	   206:         sta datalen
00:C11C A5A4            	   207:         lda datalen+1
00:C11E 6900            	   208:         adc #0
00:C120 85A4            	   209:         sta datalen+1
00:C122 60              	   210:         rts
                        	   211: 
                        	   212:         ;; Routine to print summary of data written
                        	   213: print_write_summary:
00:C123 20D7AA          	   214:         jsr newline
00:C126 A6A3            	   215:         ldx datalen
00:C128 A5A4            	   216:         lda datalen+1
00:C12A 20CDBD          	   217:         jsr linprt
00:C12D A991            	   218:         lda #<write_summary
00:C12F A0C1            	   219:         ldy #>write_summary
00:C131 201EAB          	   220:         jsr strout
00:C134 A6A5            	   221:         ldx curblock
00:C136 A900            	   222:         lda #0
00:C138 20CDBD          	   223:         jsr linprt
00:C13B 60              	   224:         rts
                        	   225: 
                        	   226:         ;; Routine to print summary of data copied
                        	   227: print_copy_summary:
00:C13C 20D7AA          	   228:         jsr newline
00:C13F A6A3            	   229:         ldx datalen
00:C141 A5A4            	   230:         lda datalen+1
00:C143 20CDBD          	   231:         jsr linprt
00:C146 A9B1            	   232:         lda #<copy_summary
00:C148 A0C1            	   233:         ldy #>copy_summary
00:C14A 201EAB          	   234:         jsr strout
00:C14D A6A7            	   235:         ldx c64addr
00:C14F A5A8            	   236:         lda c64addr+1
00:C151 20CDBD          	   237:         jsr linprt
00:C154 60              	   238:         rts
                        	   239: 
                        	   240:         ;; Routine to decrement data length
                        	   241: dec_datalen:
00:C155 38              	   242:         sec
00:C156 A5A3            	   243:         lda datalen
00:C158 E901            	   244:         sbc #1
00:C15A 85A3            	   245:         sta datalen
00:C15C A5A4            	   246:         lda datalen+1
00:C15E E900            	   247:         sbc #0
00:C160 85A4            	   248:         sta datalen+1
00:C162 60              	   249:         rts
                        	   250: 
                        	   251:         ;; Routine to increment C64 address
                        	   252: inc_c64addr:
00:C163 18              	   253:         clc
00:C164 A5A7            	   254:         lda c64addr
00:C166 6901            	   255:         adc #1
00:C168 85A7            	   256:         sta c64addr
00:C16A A5A8            	   257:         lda c64addr+1
00:C16C 6900            	   258:         adc #0
00:C16E 85A8            	   259:         sta c64addr+1
00:C170 60              	   260:         rts
                        	   261: 
                        	   262:         ;; Routine to read data length & C64 address from GEOram
                        	   263: read_header:
00:C171 A200            	   264:         ldx #0
                        	   265:         ;; Read data length
00:C173 BD00DE          	   266:         lda georam,x
00:C176 85A3            	   267:         sta datalen
00:C178 E8              	   268:         inx
00:C179 BD00DE          	   269:         lda georam,x
00:C17C 85A4            	   270:         sta datalen+1
00:C17E E8              	   271:         inx
                        	   272:         ;; Read C64 address
00:C17F BD00DE          	   273:         lda georam,x
00:C182 85A7            	   274:         sta c64addr
00:C184 E8              	   275:         inx
00:C185 BD00DE          	   276:         lda georam,x
00:C188 85A8            	   277:         sta c64addr+1
00:C18A 60              	   278:         rts
                        	   279: 
                        	   280:         ;; Read word from BASIC
00:C18B 208AAD          	   281: getwrd: jsr frmnum
00:C18E 4CF7B7          	   282:         jmp facwrd
                        	   283:         
                        	   284: write_summary:
00:C191 2042595445532057	   285:         .string " BYTES WRITTEN TO GEORAM BLOCK "
00:C199 52495454454E2054
00:C1A1 4F2047454F52414D
00:C1A9 20424C4F434B20
00:C1B0 00
                        	   286: 
                        	   287: copy_summary:
00:C1B1 2042595445532043	   288:         .string " BYTES COPIED FROM GEORAM TO "
00:C1B9 4F50494544204652
00:C1C1 4F4D2047454F5241
00:C1C9 4D20544F20
00:C1CE 00
                        	   289: 
                        	   290: outofmem:
00:C1CF 4552524F523A2047	   291:         .string "ERROR: GEORAM OUT OF MEMORY"
00:C1D7 454F52414D204F55
00:C1DF 54204F46204D454D
00:C1E7 4F5259
00:C1EA 00
                        	   292: 


Symbols by name:
c64addr                          E:00A7
chklen                           A:C03C
chkpg                            A:C0C8
copy_summary                     A:C1B1
curblock                         E:00A5
curpage                          E:00A6
datalen                          E:00A3
dec_datalen                      A:C155
enomem                           A:C0A5
facwrd                           E:B7F7
fincpy                           A:C0F7
finwrt                           A:C086
first_block                      E:00A8
frmnum                           E:AD8A
geoblock                         E:DFFF
geopage                          E:DFFE
georam                           E:DE00
getwrd                           A:C18B
illqua                           E:B248
inc_c64addr                      A:C163
inc_datalen                      A:C115
incadr                           A:C0CE
init                             A:C0FE
iqerr                            A:C010
linnum                           E:0014
linprt                           E:BDCD
MAX_BLOCK                        E:0020
MAX_PAGE                         E:0040
newline                          E:AAD7
nextblock                        A:C05D
nextpage                         A:C04B
nxblk                            A:C0E2
nxpag                            A:C0D4
offset                           E:00A7
out                              A:C02E
out1                             A:C031
outofmem                         A:C1CF
pa_adr                           E:0056
pa_buf                           E:015B
pa_len                           E:004E
pa_op                            E:004B
PA_START                         E:0080
PA_STOP                          E:00C0
print_copy_summary               A:C13C
print_write_summary              A:C123
read                             A:C0B0
read_header                      A:C171
return                           A:C085
rloop                            A:C0B9
set_block                        A:C000
start                            A:C072
strout                           E:AB1E
write                            A:C020
write_summary                    A:C191

Symbols by value:
0014 linnum
0020 MAX_BLOCK
0040 MAX_PAGE
004B pa_op
004E pa_len
0056 pa_adr
0080 PA_START
00A3 datalen
00A5 curblock
00A6 curpage
00A7 c64addr
00A7 offset
00A8 first_block
00C0 PA_STOP
015B pa_buf
AAD7 newline
AB1E strout
AD8A frmnum
B248 illqua
B7F7 facwrd
BDCD linprt
C000 set_block
C010 iqerr
C020 write
C02E out
C031 out1
C03C chklen
C04B nextpage
C05D nextblock
C072 start
C085 return
C086 finwrt
C0A5 enomem
C0B0 read
C0B9 rloop
C0C8 chkpg
C0CE incadr
C0D4 nxpag
C0E2 nxblk
C0F7 fincpy
C0FE init
C115 inc_datalen
C123 print_write_summary
C13C print_copy_summary
C155 dec_datalen
C163 inc_c64addr
C171 read_header
C18B getwrd
C191 write_summary
C1B1 copy_summary
C1CF outofmem
DE00 georam
DFFE geopage
DFFF geoblock
